import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as p}from"./app.6f7e30ef.js";const t={},e=p(`<p>Laravel \u4E2D\u7684\u670D\u52A1\u5BB9\u5668\uFF0C\u5176\u5B9E\u5C31\u662F\u4E00\u4E2A\u5168\u5C40\u7684\u5355\u4F8B\u5BF9\u8C61\u3002\u901A\u8FC7\u5165\u53E3\u6587\u4EF6\u53EF\u4EE5\u6E05\u695A\u5730\u77E5\u9053\uFF0C\u8BBF\u95EE\u4E00\u4E2A Laravel \u5E94\u7528\u540E\u53F0\u5176\u5B9E\u5C31\u662F\u505A\u4E86\u8FD9\u51E0\u4EF6\u4E8B\uFF1A1. \u5B9E\u4F8B\u5316\u4E00\u4E2A\u670D\u52A1\u5BB9\u5668\uFF08app\uFF092. \u670D\u52A1\u5BB9\u5668\u5904\u7406\u8BF7\u6C42\uFF0C\u8FD4\u56DE\u54CD\u5E94\uFF0C\u6240\u4EE5\u8BF4\uFF0C\u670D\u52A1\u5BB9\u5668\u5C31\u662F\u4E00\u4E2A\u5168\u5C40\u73AF\u5883\u3002\u670D\u52A1\u5BB9\u5668\u4E3B\u8981\u6709\u4E24\u4E2A\u4F5C\u7528\uFF0C\u4E00\u4E2A\u662F\u63D0\u4F9B\u7A0B\u5E8F\u6240\u9700\u8981\u7684\u5404\u79CD\u8D44\u6E90\u3001\u914D\u7F6E\u4FE1\u606F\u548C\u670D\u52A1\uFF0C\u53E6\u4E00\u4E2A\u662F\u5B9E\u73B0\u4E86\u63A7\u5236\u53CD\u8F6C\uFF08Ioc\uFF09\u5BB9\u5668\u3002\u8FD9\u7BC7\u6587\u7AE0\u6DF1\u5165\u8BA8\u8BBA\u540E\u8005\u7684\u6E90\u7801\u5B9E\u73B0\u3002</p><p>\u670D\u52A1\u5BB9\u5668\u662F\u901A\u8FC7 <code>Illuminate/Container/Container.php</code> \u7C7B\u5B9E\u73B0\u7684\u3002</p><p>\u6587\u4EF6 <code>Illuminate/Container/Container.php</code>\uFF1A</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">protected</span> <span class="token variable">$bindings</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">protected</span> <span class="token variable">$instances</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u670D\u52A1\u5BB9\u5668\u7C7B\u4E2D\u5B9A\u4E49\u4E86\u4E24\u4E2A\u7528\u4E8E\u7BA1\u7406\u670D\u52A1\u7684\u5C5E\u6027\uFF1A<code>$bindings</code> \u548C <code>$instances</code>\uFF0C\u5176\u4E2D $bindings \u7528\u6765\u5B58\u50A8\u63D0\u4F9B\u670D\u52A1\u7684\u56DE\u8C03\u51FD\u6570\uFF0C\u800C $instances \u7528\u4E8E\u5B58\u50A8\u7A0B\u5E8F\u4E2D\u5171\u4EAB\u7684\u5B9E\u4F8B\uFF0C\u5373\u5355\u4F8B\u3002</p><p>\u6587\u4EF6 <code>Illuminate/Container/Container.php</code>\uFF1A</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code>    <span class="token comment">// \u6CE8\u518C\u4E00\u4E2A\u7ED1\u5B9A\u5230\u5BB9\u5668\u4E2D</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">bind</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token variable">$shared</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">dropStaleInstances</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token variable">$abstract</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$concrete</span> <span class="token keyword">instanceof</span> <span class="token class-name">Closure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getClosure</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">compact</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;concrete&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;shared&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolved</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">rebound</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getClosure</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$container</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$abstract</span> <span class="token operator">==</span> <span class="token variable">$concrete</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token variable">$container</span><span class="token operator">-&gt;</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token variable">$container</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">singleton</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bind() \u51FD\u6570\u5B9E\u73B0\u4E86\u670D\u52A1\u7ED1\u5B9A\u529F\u80FD\uFF0C\u6240\u8C13\u670D\u52A1\u7ED1\u5B9A\u6709\u65F6\u4E5F\u79F0\u4E3A\u670D\u52A1\u6CE8\u518C\uFF0C\u610F\u4E49\u662F\u4E00\u6837\u7684\uFF0C\u5B9E\u9645\u4E0A\u505A\u7684\u4E8B\u60C5\u662F\u5728 $bindings \u6570\u7EC4\u4E2D\u6DFB\u52A0\u4E00\u4E2A\u952E\u503C\u5BF9\u8BB0\u5F55\uFF0C\u952E\u662F\u4E00\u4E2A\u540D\u5B57\uFF0C\u503C\u662F\u5F85\u7ED1\u5B9A\u7684\u670D\u52A1\u5BF9\u5E94\u7684\u56DE\u8C03\u51FD\u6570\uFF0C\u5373\u670D\u52A1\u7ED1\u5B9A\u4E00\u4E2A\u540D\u5B57\uFF0C\u4E4B\u540E\u4F9D\u8D56\u6CE8\u5165\u65F6 Laravel \u81EA\u52A8\u5BFB\u627E\u8BE5\u540D\u5B57\u7ED1\u5B9A\u6765\u627E\u5230\u5BF9\u5E94\u7684\u7C7B\uFF0C\u7136\u540E\u5B9E\u4F8B\u5316\u4E4B\u3002</p><p>\u7531\u4E8E\u7ED1\u5B9A\u7684\u662F\u4E00\u4E2A\u56DE\u8C03\u51FD\u6570\uFF0C\u6240\u4EE5\u5148\u5224\u65AD bind() \u51FD\u6570\u7B2C\u4E8C\u4E2A\u53C2\u6570\u662F\u5426\u662F\u56DE\u8C03\u51FD\u6570\uFF0C\u5982\u679C\u662F\u5219\u76F4\u63A5\u7ED1\u5B9A\uFF0C\u4E0D\u662F\u5219\u901A\u8FC7 getClosure() \u51FD\u6570\u521B\u5EFA\u4E00\u4E2A\u670D\u52A1\u5BF9\u5E94\u7684\u56DE\u8C03\u51FD\u6570\u3002</p><p>singleton() \u51FD\u6570\u5B9E\u73B0\u5355\u4F8B\u7ED1\u5B9A\uFF0C\u662F\u7ED1\u5B9A\u7684\u4E00\u4E2A\u7279\u6B8A\u60C5\u51B5\u3002</p><p>\u63A5\u4E0B\u6765\u662F\u670D\u52A1\u89E3\u6790\u7684\u5B9E\u73B0\u3002</p><p>\u6587\u4EF6 Illuminate/Container/Container.php\uFF1A</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5728 Laravel \u4E2D\uFF0C\u6211\u4EEC\u901A\u5E38\u76F4\u63A5\u4F7F\u7528 make() \u5C31\u80FD\u89E3\u6790\u670D\u52A1\uFF0C\u5F88\u795E\u5947\uFF0C\u4F46\u5B83\u53EA\u662F\u7B80\u5355\u5730\u8C03\u7528\u4E86 resolve()\uFF0C\u6240\u4EE5\u6211\u4EEC\u8FD8\u8981\u7EE7\u7EED\u770B resolve() \u7684\u5185\u5BB9\u3002</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">resolve</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$abstract</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getAlias</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$needsContextualBuild</span> <span class="token operator">=</span> <span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span> <span class="token function">is_null</span><span class="token punctuation">(</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getContextualConcrete</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token variable">$needsContextualBuild</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">with</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$parameters</span><span class="token punctuation">;</span>

        <span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getConcrete</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">isBuildable</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">,</span> <span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getExtenders</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$extender</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token variable">$extender</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">isShared</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token variable">$needsContextualBuild</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$object</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">fireResolvingCallbacks</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">resolved</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>

        <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">with</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$object</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getConcrete</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getContextualConcrete</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$concrete</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;concrete&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token variable">$abstract</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">isBuildable</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">,</span> <span class="token variable">$abstract</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$concrete</span> <span class="token operator">===</span> <span class="token variable">$abstract</span> <span class="token operator">||</span> <span class="token variable">$concrete</span> <span class="token keyword">instanceof</span> <span class="token class-name">Closure</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6240\u8C13\u670D\u52A1\u89E3\u6790\uFF0C\u5B9E\u9645\u4E0A\u5206\u4E3A\u4E24\u4E2A\u9636\u6BB5\uFF0C\u7B2C\u4E00\u4E2A\u9636\u6BB5\u662F\u89E3\u6790\u540D\u5B57\uFF0C\u5373\u628A\u53C2\u6570\u4E2D\u63D0\u4F9B\u7684\u7C7B\u540D\uFF0C\u901A\u8FC7\u4E00\u756A\u67E5\u627E\uFF0C\u627E\u5230\u5BF9\u5E94\u7684\u5728\u5BB9\u5668\u4E2D\u5DF2\u7ED1\u5B9A\u7684\u540D\u5B57\uFF1B\u7B2C\u4E8C\u9636\u6BB5\u4FBF\u662F\u4F7F\u7528\u8BE5\u540D\u5B57\u5B9E\u4F8B\u5316\u5BF9\u8C61\u8FD4\u56DE\u3002</p><p>resolve() \u5B8C\u6210\u4E86\u670D\u52A1\u89E3\u6790\u7684\u7B2C\u4E00\u9636\u6BB5\u2014\u2014\u540D\u5B57\u89E3\u6790\uFF0C\u7136\u540E\u8C03\u7528 build() \u5B8C\u6210\u5BF9\u8C61\u7684\u5B9E\u4F8B\u5316\uFF0C\u6700\u540E\u5C06\u670D\u52A1\u5B9E\u4F8B\u6DFB\u52A0\u5230 resolved \u6570\u7EC4\u4E2D\u3002</p><p>\u9996\u5148\uFF0C\u901A\u8FC7 getAlias() \u67E5\u627E\u670D\u52A1\u662F\u5426\u6709\u522B\u540D\uFF0C\u5982\u679C\u6709\u5219\u4F7F\u7528\u522B\u540D\u5BF9\u5E94\u7684\u670D\u52A1\u3002\u670D\u52A1\u522B\u540D\u7684\u7BA1\u7406\u662F\u901A\u8FC7 $alias \u6570\u7EC4\u6765\u5B9E\u73B0\u7684\u3002</p><p>\u7136\u540E\uFF0C\u884C 5-11 \u5224\u65AD\u662F\u5426\u6709\u53C2\u6570\uFF0C\u4EE5\u53CA\u662F\u5426\u662F\u5B9E\u4F8B\u7ED1\u5B9A\uFF0C\u5982\u679C\u662F\u5219\u76F4\u63A5\u8FD4\u56DE\uFF0C\u4E0D\u9700\u8981\u518D\u89E3\u6790\u4E86\uFF0C\u56E0\u4E3A\u670D\u52A1\u5B9E\u4F8B\u5DF2\u7ECF\u76F4\u63A5\u627E\u5230\u4E86\u3002</p><p>\u7136\u540E\u662F getConcrete()\uFF0C\u5176\u5B9E\u5C31\u662F\u5728 $bindings \u6570\u7EC4\u4E2D\u627E\u4E00\u4E0B\u6709\u6CA1\u6709\u5BF9\u5E94\u7684\u540D\u5B57\u3002\u5982\u679C\u627E\u5230\u4E86\uFF0C\u5219\u8FD4\u56DE\u8BE5\u540D\u5B57\u6240\u5BF9\u5E94\u7684\u56DE\u8C03\u51FD\u6570\uFF0C\u5982\u679C\u6CA1\u6709\uFF0C\u8FD8\u662F\u8FD4\u56DE\u8BE5\u540D\u5B57\u3002</p><p>\u7136\u540E\u662F isBuildable()\uFF0C\u5176\u5B9E\u5C31\u662F\u5224\u65AD\u4E00\u4E0B\u4E0A\u9762 getConcrete() \u7684\u7ED3\u679C\uFF0C\u5982\u679C\u662F\u56DE\u8C03\u51FD\u6570\uFF0C\u5219\u628A\u5B83\u4F20\u5165 build() \u8FDB\u884C\u670D\u52A1\u7684\u5B9E\u4F8B\u5316\uFF0C\u5426\u5219\uFF0C\u9012\u5F52\u8C03\u7528 make() \u7EE7\u7EED\u89E3\u6790\u3002</p><p>\u540E\u9762\u7684\u5C31\u4E0D\u91CD\u8981\uFF0C\u6700\u540E\u8FD4\u56DE\u4E86\u8BE5\u5BF9\u8C61\u3002</p><p>\u4E0A\u9762\u63D0\u5230\u8FC7\uFF0C\u670D\u52A1\u5BF9\u8C61\u7684\u5B9E\u4F8B\u5316\u5728 build() \u4E2D\u5B9E\u73B0\uFF1A</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">build</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$concrete</span> <span class="token keyword">instanceof</span> <span class="token class-name">Closure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$concrete</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getLastParameterOverride</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$reflector</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$reflector</span><span class="token operator">-&gt;</span><span class="token function">isInstantiable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">notInstantiable</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">buildStack</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$concrete</span><span class="token punctuation">;</span>

        <span class="token variable">$constructor</span> <span class="token operator">=</span> <span class="token variable">$reflector</span><span class="token operator">-&gt;</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$constructor</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">buildStack</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token variable">$concrete</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$dependencies</span> <span class="token operator">=</span> <span class="token variable">$constructor</span><span class="token operator">-&gt;</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$instances</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveDependencies</span><span class="token punctuation">(</span>
            <span class="token variable">$dependencies</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">buildStack</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$reflector</span><span class="token operator">-&gt;</span><span class="token function">newInstanceArgs</span><span class="token punctuation">(</span><span class="token variable">$instances</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">resolveDependencies</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$dependencies</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$results</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$dependencies</span> <span class="token keyword">as</span> <span class="token variable">$dependency</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasParameterOverride</span><span class="token punctuation">(</span><span class="token variable">$dependency</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$results</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getParameterOverride</span><span class="token punctuation">(</span><span class="token variable">$dependency</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token variable">$results</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$dependency</span><span class="token operator">-&gt;</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolvePrimitive</span><span class="token punctuation">(</span><span class="token variable">$dependency</span><span class="token punctuation">)</span>
                            <span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveClass</span><span class="token punctuation">(</span><span class="token variable">$dependency</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token variable">$results</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">resolveClass</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ReflectionParameter</span> <span class="token variable">$parameter</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$parameter</span><span class="token operator">-&gt;</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BindingResolutionException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$parameter</span><span class="token operator">-&gt;</span><span class="token function">isOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token variable">$parameter</span><span class="token operator">-&gt;</span><span class="token function">getDefaultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">throw</span> <span class="token variable">$e</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53C2\u6570 concrete \u5982\u679C\u662F\u4E00\u4E2A\u56DE\u8C03\u51FD\u6570\uFF0C\u5219\u76F4\u63A5\u8C03\u7528\u56DE\u8C03\u51FD\u6570\uFF0C\u8FD4\u56DE\u5373\u53EF\u3002\u5426\u5219\u53EA\u662F\u4E00\u4E2A\u5177\u4F53\u7C7B\u7684\u7C7B\u540D\uFF0C\u5219\u9700\u8981\u901A\u8FC7\u53CD\u5C04\u673A\u5236\u6765\u5B8C\u6210\u5B9E\u4F8B\u5316\u5BF9\u8C61\u7684\u521B\u5EFA\u3002</p><p>\u901A\u8FC7\u53CD\u5C04\u673A\u5236\u5B8C\u6210\u5BF9\u8C61\u5B9E\u4F8B\u5316\u7684\u8FC7\u7A0B\uFF1A\u9996\u5148\u6839\u636E\u7C7B\u540D\u83B7\u53D6\u53CD\u5C04\u7C7B\uFF08ReflectionClass\uFF09\u5B9E\u4F8B\uFF0C\u7136\u540E\u83B7\u53D6\u8BE5\u7C7B\u5728\u5B9E\u4F8B\u5316\u65F6\u7684\u4F9D\u8D56\uFF0C\u5373\u6784\u9020\u51FD\u6570\u9700\u8981\u7684\u53C2\u6570\u3002\u7136\u540E\u89E3\u6790\u4F9D\u8D56\uFF0C\u89E3\u6790\u4F9D\u8D56\u6700\u7EC8\u8FD8\u662F\u8C03\u7528\u7684 make()\uFF0C\u5982\u679C\u4F9D\u8D56\u8FD8\u6709\u4F9D\u8D56\uFF0C\u5219\u4ECD\u7136\u6309\u7167\u8FD9\u79CD\u65B9\u5F0F\u4E00\u5C42\u4E00\u5C42\u5F80\u4E0B\u89E3\u6790\u3002\u6700\u540E\u5C06\u89E3\u6790\u5B8C\u7684\u4F9D\u8D56\u901A\u8FC7 newInstanceArgs() \u6DFB\u52A0\u5230\u6784\u9020\u51FD\u6570\u53C2\u6570\u4E2D\u5B8C\u6210\u670D\u52A1\u5BF9\u8C61\u7684\u5B9E\u4F8B\u5316\u3002</p><p>PS\uFF1A\u867D\u7136\u5728\u5F88\u591A\u7EC6\u8282\u4E0A\u4ECD\u7136\u4E0D\u6E05\u695A\u4EE5\u53CA\u6709\u7684\u5730\u65B9\u4E3A\u4EC0\u4E48\u8981\u8FD9\u6837\u8BBE\u8BA1\uFF0C\u4F46\u662F\u80FD\u591F\u628A\u5927\u4F53\u7684\u8FC7\u7A0B\u6982\u62EC\u51FA\u6765\uFF0C\u5BF9\u4E8E\u6211\u6765\u8BF4\u4E5F\u662F\u4E00\u79CD\u63D0\u5347\uFF0C\u9996\u5148\u4F60\u5F97\u77E5\u9053\u91CC\u9762\u6709\u4EC0\u4E48\uFF0C\u6709\u4E00\u4E2A\u6982\u5FF5\uFF0C\u7136\u540E\u518D\u53BB\u63A2\u7A76\u4E3A\u4EC0\u4E48\u8981\u8FD9\u6837\u505A\u3002</p>`,27),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","2018-11-29-understand-laravel-ioc-service-container.html.vue"]]);export{k as default};
