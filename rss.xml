<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://newzone.top/rss.xml" rel="self" type="application/rss+xml"/>
    <title>FEIFFY's 开源笔记</title>
    <link>https://newzone.top/</link>
    <description>开源工具、效率方法、心理学探索的自我提升笔记，记录并输出一切能让自己提升的知识。</description>
    <language>zh-CN</language>
    <pubDate>Thu, 13 Oct 2022 02:43:47 GMT</pubDate>
    <lastBuildDate>Thu, 13 Oct 2022 02:43:47 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <item>
      <title>phpmyadmin not found</title>
      <link>https://newzone.top/_posts/2016-11-16-phpmyadmin-not-found.html</link>
      <guid>https://newzone.top/_posts/2016-11-16-phpmyadmin-not-found.html</guid>
      <source url="https://newzone.top/rss.xml">phpmyadmin not found</source>
      <pubDate>Wed, 16 Nov 2016 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>在 ubuntu 14.04 中使用：</p>
<div><pre><code>$ <span>sudo</span> <span>apt-get</span> <span>install</span> phpmyadmin
</code></pre><div aria-hidden="true"><div></div></div></div><p>安装好 phpmyadmin 之后，打开 <a href="http://localhost/phpmyadmin" target="_blank" rel="noopener noreferrer">http://localhost/phpmyadmin</a> ，不能访问，显示 404 Not Found，这不是逗我吗？</p>
<p>搜索一番解决该问题：</p>
<p>打开配置文件</p>
<div><pre><code>$ <span>sudo</span> gedit /etc/apache2/apache2.conf
</code></pre><div aria-hidden="true"><div></div></div></div><p>在最后添加一行：</p>
<div><pre><code>Include /etc/phpmyadmin/apache.conf
</code></pre><div aria-hidden="true"><div></div></div></div><p>然后重启apche2</p>
<div><pre><code>$ <span>sudo</span> <span>service</span> apache2 restart
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="参考" tabindex="-1"> 参考</h3>
<ul>
<li><a href="http://askubuntu.com/questions/55280/phpmyadmin-is-not-working-after-i-installed-it" target="_blank" rel="noopener noreferrer">http://askubuntu.com/questions/55280/phpmyadmin-is-not-working-after-i-installed-it</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>golang 学习（1）</title>
      <link>https://newzone.top/_posts/2022-07-03-learn-golang-1.html</link>
      <guid>https://newzone.top/_posts/2022-07-03-learn-golang-1.html</guid>
      <source url="https://newzone.top/rss.xml">golang 学习（1）</source>
      <pubDate>Sun, 03 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>终于，不能再拖延了，请立刻开始学习、写代码并记录总结！</p>
<hr>
<h3 id="安装开发环境" tabindex="-1"> 安装开发环境</h3>
<p>我是 mac 环境，命令行里执行安装 golang：</p>
<div><pre><code>$ brew <span>install</span> go
</code></pre><div aria-hidden="true"><div></div></div></div><p>安装好之后，查看golang版本：</p>
<div><pre><code>$ go version
go version go1.18.2 darwin/amd64
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>查看环境变量：</p>
<div><pre><code>$ go <span>env</span>
<span>GO111MODULE</span><span>=</span><span>""</span>
<span>GOARCH</span><span>=</span><span>"amd64"</span>
<span>GOBIN</span><span>=</span><span>"/Users/feiffy/Code/go/bin"</span>
<span>GOCACHE</span><span>=</span><span>"/Users/feiffy/Library/Caches/go-build"</span>
<span>GOENV</span><span>=</span><span>"/Users/feiffy/Library/Application Support/go/env"</span>
<span>GOEXE</span><span>=</span><span>""</span>
<span>GOEXPERIMENT</span><span>=</span><span>""</span>
<span>GOFLAGS</span><span>=</span><span>""</span>
<span>GOHOSTARCH</span><span>=</span><span>"amd64"</span>
<span>GOHOSTOS</span><span>=</span><span>"darwin"</span>
<span>GOINSECURE</span><span>=</span><span>""</span>
<span>GOMODCACHE</span><span>=</span><span>"/Users/feiffy/Code/go/pkg/mod"</span>
<span>GONOPROXY</span><span>=</span><span>""</span>
<span>GONOSUMDB</span><span>=</span><span>""</span>
<span>GOOS</span><span>=</span><span>"darwin"</span>
<span>GOPATH</span><span>=</span><span>"/Users/feiffy/go"</span>
<span>GOPRIVATE</span><span>=</span><span>""</span>
<span>GOPROXY</span><span>=</span><span>"https://mirrors.aliyun.com/goproxy/,direct"</span>
<span>GOROOT</span><span>=</span><span>"/usr/local/Cellar/go/1.18.2/libexec"</span>
<span>GOSUMDB</span><span>=</span><span>"sum.golang.org"</span>
<span>GOTMPDIR</span><span>=</span><span>""</span>
<span>GOTOOLDIR</span><span>=</span><span>"/usr/local/Cellar/go/1.18.2/libexec/pkg/tool/darwin_amd64"</span>
<span>GOVCS</span><span>=</span><span>""</span>
<span>GOVERSION</span><span>=</span><span>"go1.18.2"</span>
<span>GCCGO</span><span>=</span><span>"gccgo"</span>
<span>GOAMD64</span><span>=</span><span>"v1"</span>
<span>AR</span><span>=</span><span>"ar"</span>
<span>CC</span><span>=</span><span>"clang"</span>
<span>CXX</span><span>=</span><span>"clang++"</span>
<span>CGO_ENABLED</span><span>=</span><span>"1"</span>
<span>GOMOD</span><span>=</span><span>"/dev/null"</span>
<span>GOWORK</span><span>=</span><span>""</span>
<span>CGO_CFLAGS</span><span>=</span><span>"-g -O2"</span>
<span>CGO_CPPFLAGS</span><span>=</span><span>""</span>
<span>CGO_CXXFLAGS</span><span>=</span><span>"-g -O2"</span>
<span>CGO_FFLAGS</span><span>=</span><span>"-g -O2"</span>
<span>CGO_LDFLAGS</span><span>=</span><span>"-g -O2"</span>
<span>PKG_CONFIG</span><span>=</span><span>"pkg-config"</span>
<span>GOGCCFLAGS</span><span>=</span><span>"-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/jj/y391w94114bfxtn4t98q0lpw0000gn/T/go-build94119515=/tmp/go-build -gno-record-gcc-switches -fno-common"</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>注意到这里的 <code>$GOPATH</code> 默认是在 home 目录下的，我想把它改到我的 <code>Code</code> 目录下面，为此，在 <code>~/.zshrc</code> 中添加以下配置：</p>
<div><pre><code><span>export</span> <span>GOPATH</span><span>=~</span>/Code/go
<span>export</span> <span>GOBIN</span><span>=</span><span>$GOPATH</span>/bin
<span><span>PATH</span></span><span>=</span><span>$PATH</span><span>:</span><span>$GOPATH</span><span>:</span><span>$GOBIN</span>
<span>export</span> <span>PATH</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>在 $GOPATH 中创建 bin src pkg 三个文件夹：</p>
<div><pre><code>$ <span>mkdir</span> <span>-p</span> <span>$GOPATH</span>/<span>{</span>bin,src,pkg<span>}</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>使用 vscode 作为开发工具，打开 <code>$GOPATH</code> 目录</p>
<div><pre><code>$ <span>cd</span> <span>$GOPATH</span>
$ code <span>.</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>新建 <code>hello.go</code> 文件，提示要装一些插件，先不点安装，直接 <code>shift + command + P</code> 打开命令输入框搜索 <code>Go: Install/Update Tools</code>，全选，点击安装。</p>
<p>如果安装失败了，则需要配置一下镜像源：</p>
<div><pre><code><span># 1. 七牛 CDN </span>
$ go <span>env</span> <span>-w</span> <span>GOPROXY</span><span>=</span>https://goproxy.cn,direct 

<span># 2. 阿里云 </span>

$ go <span>env</span> <span>-w</span> <span>GOPROXY</span><span>=</span>https://mirrors.aliyun.com/goproxy/,direct
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>hello.go</code> 文件内容：</p>
<div><pre><code><span>package</span> main

<span>import</span> <span>"fmt"</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
   fmt<span>.</span><span>Println</span><span>(</span><span>"Hello, World!"</span><span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>最后使用内置终端运行 hello 项目：</p>
<div><pre><code>$ go run main.go
Hello, World<span>!</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><h3 id="创建第一个项目-goblog" tabindex="-1"> 创建第一个项目 goblog</h3>
<p>创建第一个项目 goblog，并用 vscode 打开：</p>
<div><pre><code>$ <span>cd</span> <span>$GOPATH</span>/src
$ <span>mkdir</span> goblog
$ code goblog
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>创建 <code>main.go</code>，内容如下：</p>
<div><pre><code><span>package</span> main

<span>import</span> <span>(</span>
    <span>"fmt"</span>
    <span>"net/http"</span>
<span>)</span>

<span>func</span> <span>handlerFunc</span><span>(</span>w http<span>.</span>ResponseWriter<span>,</span> r <span>*</span>http<span>.</span>Request<span>)</span> <span>{</span>
    fmt<span>.</span><span>Fprint</span><span>(</span>w<span>,</span> <span>"&lt;h1>Hello, 这里是 goblog&lt;/h1>"</span><span>)</span>
<span>}</span>
<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    http<span>.</span><span>HandleFunc</span><span>(</span><span>"/"</span><span>,</span> handlerFunc<span>)</span>
    http<span>.</span><span>ListenAndServe</span><span>(</span><span>":3000"</span><span>,</span> <span>nil</span><span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>然后在命令行运行</p>
<div><pre><code>$ go run main.go

</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>然后在浏览器打开 <code>http://localhost:3000</code>，看到输出的内容。</p>
<p>以上就是一个简单的 go web 程序。下面来解释一下上面的代码：</p>
<p><code>package main</code> 表示一个程序的入口点。</p>
<p>导入了两个包，<code>fmt</code> 包用来输出，下面 <code>Fprint</code> 函数将内容输出到变量 w 中，我们通常用这个函数来往文件中写入内容。</p>
<div><pre><code>fmt<span>.</span><span>Fprint</span><span>(</span>w<span>,</span> <span>"&lt;h1>Hello, 这里是 goblog&lt;/h1>"</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>第二个包是 <code>net/http</code>，提供了HTTP协议相关的实现。</p>
<ul>
<li><code>http.ListenAndServe</code> 用来监听本地3000端口以提供服务，</li>
<li><code>http.HandleFunc</code> 用来指定处理HTTP请求的处理代码。</li>
<li><code>http.Request</code> 是用户的请求，一般用<code>r</code>简写</li>
<li><code>http.ResponseWriter</code> 是用户的响应，一般用<code>w</code>简写</li>
</ul>
<h3 id="路径解析" tabindex="-1"> 路径解析</h3>
<p>将上面的代码改为根据不同路由不同的页面处理：</p>
<div><pre><code><span>package</span> main

<span>import</span> <span>(</span>
    <span>"fmt"</span>
    <span>"net/http"</span>
<span>)</span>

<span>func</span> <span>handlerFunc</span><span>(</span>w http<span>.</span>ResponseWriter<span>,</span> r <span>*</span>http<span>.</span>Request<span>)</span> <span>{</span>
    <span>if</span> r<span>.</span>URL<span>.</span>Path <span>==</span> <span>"/"</span> <span>{</span>
        fmt<span>.</span><span>Fprint</span><span>(</span>w<span>,</span> <span>"&lt;h1>Hello, 这里是 goblog&lt;/h1>"</span><span>)</span>
    <span>}</span> <span>else</span> <span>if</span> r<span>.</span>URL<span>.</span>Path <span>==</span> <span>"/about"</span> <span>{</span>
        fmt<span>.</span><span>Fprint</span><span>(</span>w<span>,</span> <span>"此博客是用以记录编程笔记，如您有反馈或建议，请联系 "</span><span>+</span>
            <span>"&lt;a href=\"mailto:summer@example.com\">summer@example.com&lt;/a>"</span><span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
        fmt<span>.</span><span>Fprint</span><span>(</span>w<span>,</span> <span>"&lt;h1>请求页面未找到 :(&lt;/h1>"</span><span>+</span>
            <span>"&lt;p>如有疑惑，请联系我们。&lt;/p>"</span><span>)</span>
    <span>}</span>
<span>}</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    http<span>.</span><span>HandleFunc</span><span>(</span><span>"/"</span><span>,</span> handlerFunc<span>)</span>
    http<span>.</span><span>ListenAndServe</span><span>(</span><span>":3000"</span><span>,</span> <span>nil</span><span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这里的<code>/</code>并不是根目录，而是表示任意目录。</p>
<h3 id="自动载入工具" tabindex="-1"> 自动载入工具</h3>
<p>go代码每次需要编译运行才能看到效果，可以安装<code>air</code>工具，监控项目文件变化，一旦有变更则自动触发编译运行，这样就不用每次我们手动编译运行了。</p>
<p><code>air</code>是用go写的一个命令行工具，用下面的命令安装air：</p>
<div><pre><code>$ <span>GO111MODULE</span><span>=</span>on  go <span>install</span> github.com/cosmtrek/air@latest
</code></pre><div aria-hidden="true"><div></div></div></div><p>最前面的 <code>GO111MODULE=on</code> 是只为当前命令启用 Go Module。</p>
<p>安装好之后，在项目根目录下执行 <code>air</code> 即可。下面是执行效果，每当改动文件时，都会自动载入，有错误也报出来了。</p>
<div><pre><code>failed to build, error: <span>exit</span> status <span>2</span>
main.go has changed
building<span>..</span>.
<span># github.com/feiffy/goblog</span>
./main.go:16:22: syntax error: unexpected <span>)</span>, expecting name or <span>(</span>
failed to build, error: <span>exit</span> status <span>2</span>
main.go has changed
building<span>..</span>.
<span># github.com/feiffy/goblog</span>
./main.go:16:22: undefined: http.StatusNot
failed to build, error: <span>exit</span> status <span>2</span>
main.go has changed
building<span>..</span>.
running<span>..</span>.
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="修改响应-header" tabindex="-1"> 修改响应 header</h3>
<p>我们发现上面代码中 <code>/about</code> 中的页面显示不正常，这是因为它的 <code>Content-Type: text/plain; charset=utf-8</code> 显然是错误的。那么我们来修改一下。</p>
<div><pre><code><span>package</span> main

<span>import</span> <span>(</span>
    <span>"fmt"</span>
    <span>"net/http"</span>
<span>)</span>

<span>func</span> <span>handlerFunc</span><span>(</span>w http<span>.</span>ResponseWriter<span>,</span> r <span>*</span>http<span>.</span>Request<span>)</span> <span>{</span>
    w<span>.</span><span>Header</span><span>(</span><span>)</span><span>.</span><span>Set</span><span>(</span><span>"Content-Type"</span><span>,</span> <span>"text/html; charset=utf-8"</span><span>)</span>
    <span>if</span> r<span>.</span>URL<span>.</span>Path <span>==</span> <span>"/"</span> <span>{</span>
        fmt<span>.</span><span>Fprint</span><span>(</span>w<span>,</span> <span>"&lt;h1>Hello, 欢迎来到 goblog！&lt;/h1>"</span><span>)</span>
    <span>}</span> <span>else</span> <span>if</span> r<span>.</span>URL<span>.</span>Path <span>==</span> <span>"/about"</span> <span>{</span>
        fmt<span>.</span><span>Fprint</span><span>(</span>w<span>,</span> <span>"此博客是用以记录编程笔记，如您有反馈或建议，请联系 "</span><span>+</span>
            <span>"&lt;a href=\"mailto:summer@example.com\">summer@example.com&lt;/a>"</span><span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
        fmt<span>.</span><span>Fprint</span><span>(</span>w<span>,</span> <span>"&lt;h1>请求页面未找到 :(&lt;/h1>"</span><span>+</span>
            <span>"&lt;p>如有疑惑，请联系我们。&lt;/p>"</span><span>)</span>
    <span>}</span>
<span>}</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    http<span>.</span><span>HandleFunc</span><span>(</span><span>"/"</span><span>,</span> handlerFunc<span>)</span>
    http<span>.</span><span>ListenAndServe</span><span>(</span><span>":3000"</span><span>,</span> <span>nil</span><span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这行代码设置了header头</p>
<div><pre><code>w<span>.</span><span>Header</span><span>(</span><span>)</span><span>.</span><span>Set</span><span>(</span><span>"Content-Type"</span><span>,</span> <span>"text/html; charset=utf-8"</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>那么我们如何知道 w 有 Header() 方法的呢？答案是看文档。</p>
<h3 id="使用-godoc-文档" tabindex="-1"> 使用 godoc 文档</h3>
<p>go自带了文档工具，1.18之后需要手动安装：</p>
<div><pre><code>$ <span>GO111MODULE</span><span>=</span>on  go <span>install</span> golang.org/x/tools/cmd/godoc@latest
</code></pre><div aria-hidden="true"><div></div></div></div><p>安装到了 <code>$GOPATH/bin/godoc</code> 下面，由于之前我们已经设置了路径环境变量，所以可以在命令行直接执行 <code>godoc</code>启动文档服务：</p>
<div><pre><code>$ godoc <span>-http</span><span>=</span>:6060
</code></pre><div aria-hidden="true"><div></div></div></div><p>然后在浏览器打开 <code>http://localhost:6060</code> 查看文档。</p>
<p>找到 <code>net/http</code> 打开页面，搜索 <code>ResponseWriter</code>，定位到这个类型，滚动下来，点击 <code>Example</code> 取消折叠，即可看到示例代码，这里面看到一行输出状态码的。</p>
<div><pre><code>w<span>.</span><span>WriteHeader</span><span>(</span>http<span>.</span>StatusOK<span>)</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>那么，这时如果想要输出404状态码，该如何呢。</p>
<p>只要在页面搜索 <code>StatusOk</code> 就能找到所有的状态码的定义。所以根据这一个示例，我们可以文档中获得很多帮助。</p>
<p>加上了404之后的代码示例如下：</p>
<div><pre><code><span>package</span> main

<span>import</span> <span>(</span>
    <span>"fmt"</span>
    <span>"net/http"</span>
<span>)</span>

<span>func</span> <span>handlerFunc</span><span>(</span>w http<span>.</span>ResponseWriter<span>,</span> r <span>*</span>http<span>.</span>Request<span>)</span> <span>{</span>
    w<span>.</span><span>Header</span><span>(</span><span>)</span><span>.</span><span>Set</span><span>(</span><span>"Content-Type"</span><span>,</span> <span>"text/html; charset=utf-8"</span><span>)</span>
    <span>if</span> r<span>.</span>URL<span>.</span>Path <span>==</span> <span>"/"</span> <span>{</span>
        fmt<span>.</span><span>Fprint</span><span>(</span>w<span>,</span> <span>"&lt;h1>Hello, 欢迎来到 goblog！&lt;/h1>"</span><span>)</span>
    <span>}</span> <span>else</span> <span>if</span> r<span>.</span>URL<span>.</span>Path <span>==</span> <span>"/about"</span> <span>{</span>
        fmt<span>.</span><span>Fprint</span><span>(</span>w<span>,</span> <span>"此博客是用以记录编程笔记，如您有反馈或建议，请联系 "</span><span>+</span>
            <span>"&lt;a href=\"mailto:summer@example.com\">summer@example.com&lt;/a>"</span><span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
        w<span>.</span><span>WriteHeader</span><span>(</span>http<span>.</span>StatusNotFound<span>)</span>
        fmt<span>.</span><span>Fprint</span><span>(</span>w<span>,</span> <span>"&lt;h1>请求页面未找到 :(&lt;/h1>"</span><span>+</span>
            <span>"&lt;p>如有疑惑，请联系我们。&lt;/p>"</span><span>)</span>
    <span>}</span>
<span>}</span>

<span>func</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
    http<span>.</span><span>HandleFunc</span><span>(</span><span>"/"</span><span>,</span> handlerFunc<span>)</span>
    http<span>.</span><span>ListenAndServe</span><span>(</span><span>":3000"</span><span>,</span> <span>nil</span><span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>然后浏览器随便访问一个不存在的页面，请求中显示404错误了。</p>
]]></content:encoded>
    </item>
    <item>
      <title>redis设置锁,(20)秒还未设置成功,请检查redis是否正常</title>
      <link>https://newzone.top/_posts/2022-06-29-php-return-and-finally.html</link>
      <guid>https://newzone.top/_posts/2022-06-29-php-return-and-finally.html</guid>
      <source url="https://newzone.top/rss.xml">redis设置锁,(20)秒还未设置成功,请检查redis是否正常</source>
      <pubDate>Wed, 29 Jun 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h3 id="问题" tabindex="-1"> 问题</h3>
<p>昨晚上线之后，出现了不少次邮件告警：</p>
<div><pre><code>您好  
#redis设置锁,(20)秒还未设置成功,请检查redis是否正常  
key: per:sorce-do-task:task_id:task_scanuser_id:8268817, value: per:sorce-do-task:task_id:task_scanuser_id:8268817
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><h3 id="分析" tabindex="-1"> 分析</h3>
<p>看告警内容，是 redis 设置锁没有成功，一直等待这个锁。看了一下告警处的代码：</p>
<div><pre><code>
<span>/**
 * 设置锁,一定要返回成功,否则一直等待
 * <span>@param</span> <span>$key</span>
 * <span>@param</span> <span>$value</span>
 * <span>@param</span> <span><span>int</span></span> <span>$ttl</span> 过期时间
 * <span>@param</span> <span><span>int</span></span> <span>$maxsleeptime</span> 最长等待时间,超过该时间发邮件提醒
 * <span>@return</span> <span><span>mixed</span></span>
 */</span>
<span>function</span> <span>set_synchronized_lock</span><span>(</span><span>$key</span><span>,</span> <span>$value</span><span>,</span> <span>$ttl</span> <span>=</span> <span>0</span><span>,</span> <span>$maxsleeptime</span> <span>=</span> <span>20</span><span>)</span>
<span>{</span>
	<span>$CI</span> <span>=</span> <span>&amp;</span><span>get_instance</span><span>(</span><span>)</span><span>;</span>
	<span>$CI</span><span>-></span><span>load</span><span>-></span><span>driver</span><span>(</span><span>'cache'</span><span>)</span><span>;</span>
	<span>$sleep</span> <span>=</span> <span>0</span><span>;</span>
	<span>while</span> <span>(</span><span>!</span><span>$CI</span><span>-></span><span>cache</span><span>-></span><span>redis</span><span>-></span><span>savenx</span><span>(</span><span>$key</span><span>,</span> <span>$value</span><span>,</span> <span>$ttl</span><span>)</span><span>)</span> <span>{</span>
		<span>sleep</span><span>(</span><span>1</span><span>)</span><span>;</span>
		<span>$sleep</span><span>++</span><span>;</span>
		<span>if</span> <span>(</span><span>$sleep</span> <span>></span> <span>$maxsleeptime</span><span>)</span> <span>{</span>
			<span>$content</span> <span>=</span> <span>"#redis设置锁,(<span><span>$maxsleeptime</span></span>)秒还未设置成功,请检查redis是否正常&lt;br>key: <span><span>$key</span></span>, value: <span><span>$value</span></span>"</span><span>;</span>
			<span>send_email</span><span>(</span><span>'REDIS_LOCK_NOTIFY'</span><span>,</span> <span>[</span><span>]</span><span>,</span> <span>[</span><span>$content</span><span>]</span><span>)</span><span>;</span>
			<span>break</span><span>;</span>
		<span>}</span>
	<span>}</span>
	<span>return</span> <span>true</span><span>;</span>
<span>}</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这里循环间隔1s不断用 <code>savenx</code> 方法来设置锁（获取锁），然后它失败了，每次失败sleep+1，等到sleep超过最大$maxsleeptime时间（预设为20s）时就发邮件告警。</p>
<p>是哪些原因会导致它失败呢？</p>
<p>进入 <code>savenx</code> 源码看，实际上调用的是 redis 的 <a href="https://redis.io/commands/setnx" target="_blank" rel="noopener noreferrer">setnx</a> 命令，这个命令的官方说明是：</p>
<div><pre><code>Return Integer reply, specifically:

<span>1</span> <span>if</span> the key was <span>set</span>
<span>0</span> <span>if</span> the key was not <span>set</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>也就是说在不断循环的尝试过程中，这个 key 表示的值已经存在，也就是说锁一直在被别人占用。</p>
<p>这个时候，我们需要去看是谁占用了这个 key，我们通过告警邮件中的 key-value 信息找到报错业务处的代码：</p>
<div><pre><code><span>public</span> <span>function</span> <span>do_task_post</span><span>(</span><span>)</span>
<span>{</span>
	<span>$lock_key</span> <span>=</span> <span>'per:sorce-do-task:task_id:'</span> <span>.</span> <span>$task_ids</span> <span>.</span> <span>'user_id:'</span> <span>.</span> <span>$this</span><span>-></span><span>userData</span><span>[</span><span>'user_id'</span><span>]</span><span>;</span>  
	<span>$this</span><span>-></span><span>set_lock</span><span>(</span><span>$lock_key</span><span>,</span> <span>'做积分任务加锁'</span><span>)</span><span>;</span>
	<span>try</span> <span>{</span>
		<span>...</span>	
		<span>return</span> <span>$this</span><span>-></span><span>sendFail</span><span>(</span><span>null</span><span>,</span> <span>'没有可完成的任务'</span><span>)</span><span>;</span>
	<span>}</span> <span>catch</span><span>(</span><span>Exception</span> <span>$e</span><span>)</span> <span>{</span>
		<span>...</span>
	<span>}</span> <span>finally</span><span>(</span><span>)</span> <span>{</span>
		<span>$this</span><span>-></span><span>release_lock</span><span>(</span><span>$lock_key</span><span>,</span> <span>'做积分任务解锁'</span><span>)</span><span>;</span>
	<span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这个业务加解锁相关的业务抽象如上，第4行是加锁，第12行是解锁。</p>
<p>这个业务之前一直正常，理论上锁不应该一直占用。唯一释放锁的地方就是 <code>finally</code> 语句块中的 <code>release_lock()</code>，这个方法本身没有改动过，应该不会突然就一直释放失败了。还有一种可能就是它没有执行。</p>
<p>是不是因为有慢查询导致它没有执行？这次没有修改到这个业务，看了业务代码，没有慢查询。这个原因PASS。</p>
<p>我们看到 <code>try</code> 中有 <code>return</code> 语句，是不是这个 <code>return</code> 语句提前返回了？</p>
<p>本地调试了几次确实提前返回了，切换到上线前的分支版本又调试了几次，发现是先释放锁再返回的。仔细对比代码，发现这次修改了 <code>$this-&gt;sendFail()</code> 方法，把里面的 <code>return</code> 改为了 <code>exit</code> 了。原来是这个原因？是它影响了 <code>finally</code> 语句块的执行。</p>
<div><pre><code><span>public</span> <span>function</span> <span>sendFail</span><span>(</span><span>$data</span> <span>,</span> <span>$msg</span><span>)</span><span>{</span>  
    <span>$response</span> <span>=</span> <span>[</span>  
        <span>'code'</span> <span>=></span> <span>-</span><span>1</span><span>,</span>  
        <span>'data'</span> <span>=></span> <span>$data</span><span>,</span>  
        <span>'msg'</span>  <span>=></span> <span>$msg</span>  
    <span>]</span><span>;</span>  
    <span>return</span><span>;</span> <span>// 昨晚上线后是 exit;</span>
<span>}</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>那么 <code>finally</code> 语句跟 <code>return</code> 和 <code>exit</code> 有什么关系呢？我找了下官方文档看，果然有解释：官方文档关于 <code>finally</code> 解释如下：</p>
<blockquote>
<p>finally 代码块可以放在 catch 之后，或者直接代替它。 无论是否抛出了异常，在 try 和 catch 之后、在执行后续代码之前， 放在 finally 里的代码总是会执行。</p>
<p><strong>值得注意的是 finally 和 return 语句之间存在相互影响。 如果在 try 或 catch 里遇到 return，仍然会执行 finally 里的代码。 而且，遇到 return 语句时，会先执行 finally 再返回结果。 此外，如果 finally 里也包含了 return 语句，将返回 finally 里的值。</strong></p>
</blockquote>
<h2 id="总结" tabindex="-1"> 总结</h2>
<ul>
<li><code>try-catch-finally</code> 的执行顺序是：try 语句 - (exit) -  finally语句 -（finally return） - (try return)</li>
<li>改基类代码时要慎重，测试覆盖全。</li>
<li>禁止使用 exit，因为有的框架可能还会在控制器返回之后，会有后置默认处理。</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>